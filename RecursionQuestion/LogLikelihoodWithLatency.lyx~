#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{bbm}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Does latency prevent the Ogata recursion trick?
\end_layout

\begin_layout Author
Marcos Costa Santos Carreira
\end_layout

\begin_layout Date
Jul-2020
\end_layout

\begin_layout Section
Setup
\end_layout

\begin_layout Subsection
Two Kernels
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Kernels.png
	lyxscale 40
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Kernels
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Ogata recursion trick
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The double summation:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\sum_{i=1}^{n}\log\left(\lambda_{0}+\alpha\cdot\sum_{j=1}^{i-1}\exp\left(-\beta\left(t_{i}-t_{j}\right)\right)\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Can be converted into (Ogata 1978):
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\sum_{i=1}^{n}\log\left(\lambda_{0}+\alpha\cdot A_{i}\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
With:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
A_{i}=\exp\left(-\beta\left(t_{i}-t_{i-1}\right)\right)\cdot A_{i-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
A_{1}=0
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Because:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
A_{i}=\sum_{j=1}^{i-1}\exp\left(-\beta\left(t_{i}-t_{j}\right)\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
A_{i}=\exp\left(-\beta\left(t_{i}-t_{i-1}\right)\right)\cdot\exp\left(+\beta\left(t_{i}-t_{i-1}\right)\right)\cdot\sum_{j=1}^{i-1}\exp\left(-\beta\left(t_{i}-t_{j}\right)\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
A_{i}=\exp\left(-\beta\left(t_{i}-t_{i-1}\right)\right)\cdot\sum_{j=1}^{i-1}\exp\left(-\beta\left(t_{i-1}-t_{j}\right)\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
A_{i}=\exp\left(-\beta\left(t_{i}-t_{i-1}\right)\right)\cdot\left(1+\sum_{j=1}^{i-2}\exp\left(-\beta\left(t_{i-1}-t_{j}\right)\right)\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
A_{i}=\exp\left(-\beta\left(t_{i}-t_{i-1}\right)\right)\cdot\left(1+A_{i-1}\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
But it seems to me that we can only do that for the exponential kernel without
 latency; if we had 4 timestamps in sequence with a constant difference
 of 0.3*latency, the last timestamp could only be influenced by the first,
 and I don't see how to do it with the recursion.
\end_layout

\begin_layout Section
Take the long way home
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
I programmed the cluster simulation algorithm and the Log-Likelihood estimation
 (without the Ogata trick and considering latency) in Mathematica.
\end_layout

\begin_layout Standard
I checked the average number of points with a large latency against Tick
 and the average with zero latency against the expected theoretical value
 and against Tick.
\end_layout

\begin_layout Standard
For 
\begin_inset Formula $\left\{ \lambda_{0},\alpha,\beta\right\} =\left\{ 1.2,0.6,0.8\right\} $
\end_inset

, 
\begin_inset Formula $T=200$
\end_inset

 and the exponential kernel with latency 1: 
\begin_inset Formula $\alpha\cdot\exp\left(-\beta\cdot\left(t-1\right)\right)\cdot\mathbbm{1}{}_{t\geq1}$
\end_inset

 I have two results for the estimation (without latency and with latency):
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename MathematicaResults.png
	lyxscale 40
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Mathematica estimation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Question
\end_layout

\begin_layout Standard
I'm going to program the Log-Likelihood estimation (without the Ogata trick
 and considering latency) in Python now.
 Is it needed or can I do something else? Is the Ogata trick impossible
 with latency?
\end_layout

\end_body
\end_document
